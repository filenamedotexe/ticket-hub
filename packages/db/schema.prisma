generator client {
  provider = "prisma-client-js"
  output   = "../../node_modules/.prisma/client"
}

datasource db {
  provider = "sqlite"
  url      = env("DATABASE_URL")
}

model User {
  id            String     @id @default(cuid())
  name          String?
  email         String     @unique
  emailVerified DateTime?
  image         String?
  role          String     @default("CLIENT")
  tenantId      String
  createdAt     DateTime   @default(now())
  updatedAt     DateTime   @updatedAt
  accounts      Account[]
  sessions      Session[]
  tenant        Tenant     @relation(fields: [tenantId], references: [id], onDelete: Cascade)
  createdItems  WorkItem[] @relation("WorkItemCreator")
  assignedItems WorkItem[] @relation("WorkItemAssignee")

  @@map("users")
}

model Tenant {
  id        String     @id @default(cuid())
  name      String
  slug      String     @unique
  createdAt DateTime   @default(now())
  updatedAt DateTime   @updatedAt
  users     User[]
  workItems WorkItem[]

  @@map("tenants")
}

model WorkItem {
  id          String   @id @default(cuid())
  tenantId    String
  type        String
  title       String
  description String?
  status      String   @default("TODO")
  priority    String   @default("MEDIUM")
  meta        String?
  assigneeId  String?
  createdById String
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  createdBy   User     @relation("WorkItemCreator", fields: [createdById], references: [id], onDelete: Cascade)
  assignee    User?    @relation("WorkItemAssignee", fields: [assigneeId], references: [id])
  tenant      Tenant   @relation(fields: [tenantId], references: [id], onDelete: Cascade)

  @@map("work_items")
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?
  user              User    @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
  @@map("accounts")
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("sessions")
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
  @@map("verificationtokens")
}
